using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class HandControlModel {
    [RealtimeProperty (1, true, true)] private float _rightHandAnimationValue = 0.0f;
    [RealtimeProperty (2, true, true)] private float _leftHandAnimationValue  = 0.0f;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class HandControlModel : IModel {
    // Properties
    public float rightHandAnimationValue {
        get { return _cache.LookForValueInCache(_rightHandAnimationValue, entry => entry.rightHandAnimationValueSet, entry => entry.rightHandAnimationValue); }
        set { if (value == rightHandAnimationValue) return; _cache.UpdateLocalCache(entry => { entry.rightHandAnimationValueSet = true; entry.rightHandAnimationValue = value; return entry; }); FireRightHandAnimationValueDidChange(value); }
    }
    public float leftHandAnimationValue {
        get { return _cache.LookForValueInCache(_leftHandAnimationValue, entry => entry.leftHandAnimationValueSet, entry => entry.leftHandAnimationValue); }
        set { if (value == leftHandAnimationValue) return; _cache.UpdateLocalCache(entry => { entry.leftHandAnimationValueSet = true; entry.leftHandAnimationValue = value; return entry; }); FireLeftHandAnimationValueDidChange(value); }
    }
    
    // Events
    public delegate void RightHandAnimationValueDidChange(HandControlModel model, float value);
    public event         RightHandAnimationValueDidChange rightHandAnimationValueDidChange;
    public delegate void LeftHandAnimationValueDidChange(HandControlModel model, float value);
    public event         LeftHandAnimationValueDidChange leftHandAnimationValueDidChange;
    
    // Delta updates
    private struct LocalCacheEntry {
        public bool  rightHandAnimationValueSet;
        public float rightHandAnimationValue;
        public bool  leftHandAnimationValueSet;
        public float leftHandAnimationValue;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache;
    
    public HandControlModel() {
        _cache = new LocalChangeCache<LocalCacheEntry>();
    }
    
    // Events
    public void FireRightHandAnimationValueDidChange(float value) {
        try {
            if (rightHandAnimationValueDidChange != null)
                rightHandAnimationValueDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    public void FireLeftHandAnimationValueDidChange(float value) {
        try {
            if (leftHandAnimationValueDidChange != null)
                leftHandAnimationValueDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        RightHandAnimationValue = 1,
        LeftHandAnimationValue = 2,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Mark unreliable properties as clean and flatten the in-flight cache.
            // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
            _rightHandAnimationValue = rightHandAnimationValue;
            _leftHandAnimationValue = leftHandAnimationValue;
            _cache.Clear();
            
            // Write all properties
            length += WriteStream.WriteFloatLength((uint)PropertyID.RightHandAnimationValue);
            length += WriteStream.WriteFloatLength((uint)PropertyID.LeftHandAnimationValue);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.rightHandAnimationValueSet)
                    length += WriteStream.WriteFloatLength((uint)PropertyID.RightHandAnimationValue);
                if (entry.leftHandAnimationValueSet)
                    length += WriteStream.WriteFloatLength((uint)PropertyID.LeftHandAnimationValue);
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteFloat((uint)PropertyID.RightHandAnimationValue, _rightHandAnimationValue);
            stream.WriteFloat((uint)PropertyID.LeftHandAnimationValue, _leftHandAnimationValue);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.rightHandAnimationValueSet || entry.leftHandAnimationValueSet)
                    _cache.PushLocalCacheToInflight(context.updateID);
                
                if (entry.rightHandAnimationValueSet)
                    stream.WriteFloat((uint)PropertyID.RightHandAnimationValue, entry.rightHandAnimationValue);
                if (entry.leftHandAnimationValueSet)
                    stream.WriteFloat((uint)PropertyID.LeftHandAnimationValue, entry.leftHandAnimationValue);
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        bool rightHandAnimationValueExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.rightHandAnimationValueSet);
        bool leftHandAnimationValueExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.leftHandAnimationValueSet);
        
        // Remove from in-flight
        if (context.deltaUpdatesOnly && context.reliableChannel)
            _cache.RemoveUpdateFromInflight(context.updateID);
        
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.RightHandAnimationValue: {
                    float previousValue = _rightHandAnimationValue;
                    
                    _rightHandAnimationValue = stream.ReadFloat();
                    
                    if (!rightHandAnimationValueExistsInChangeCache && _rightHandAnimationValue != previousValue)
                        FireRightHandAnimationValueDidChange(_rightHandAnimationValue);
                    break;
                }
                case (uint)PropertyID.LeftHandAnimationValue: {
                    float previousValue = _leftHandAnimationValue;
                    
                    _leftHandAnimationValue = stream.ReadFloat();
                    
                    if (!leftHandAnimationValueExistsInChangeCache && _leftHandAnimationValue != previousValue)
                        FireLeftHandAnimationValueDidChange(_leftHandAnimationValue);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
