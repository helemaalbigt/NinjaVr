using System;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class NinjaGameManagerModel {
    [RealtimeProperty(1, true, true)] uint   _gameState;
    [RealtimeProperty(2, true, true)] float _startTime = -1;

}
/* ----- Begin Normal Autogenerated Code ----- */
public partial class NinjaGameManagerModel : IModel {
    // Properties
    public uint gameState {
        get { return _cache.LookForValueInCache(_gameState, entry => entry.gameStateSet, entry => entry.gameState); }
        set { if (value == gameState) return; _cache.UpdateLocalCache(entry => { entry.gameStateSet = true; entry.gameState = value; return entry; }); FireGameStateDidChange(value); }
    }
    public float startTime {
        get { return _cache.LookForValueInCache(_startTime, entry => entry.startTimeSet, entry => entry.startTime); }
        set { if (value == startTime) return; _cache.UpdateLocalCache(entry => { entry.startTimeSet = true; entry.startTime = value; return entry; }); FireStartTimeDidChange(value); }
    }
    
    // Events
    public delegate void GameStateDidChange(NinjaGameManagerModel model, uint value);
    public event         GameStateDidChange gameStateDidChange;
    public delegate void StartTimeDidChange(NinjaGameManagerModel model, float value);
    public event         StartTimeDidChange startTimeDidChange;
    
    // Delta updates
    private struct LocalCacheEntry {
        public bool  gameStateSet;
        public uint  gameState;
        public bool  startTimeSet;
        public float startTime;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache;
    
    public NinjaGameManagerModel() {
        _cache = new LocalChangeCache<LocalCacheEntry>();
    }
    
    // Events
    public void FireGameStateDidChange(uint value) {
        try {
            if (gameStateDidChange != null)
                gameStateDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    public void FireStartTimeDidChange(float value) {
        try {
            if (startTimeDidChange != null)
                startTimeDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        GameState = 1,
        StartTime = 2,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Mark unreliable properties as clean and flatten the in-flight cache.
            // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
            _gameState = gameState;
            _startTime = startTime;
            _cache.Clear();
            
            // Write all properties
            length += WriteStream.WriteVarint32Length((uint)PropertyID.GameState, _gameState);
            length += WriteStream.WriteFloatLength((uint)PropertyID.StartTime);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.gameStateSet)
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.GameState, entry.gameState);
                if (entry.startTimeSet)
                    length += WriteStream.WriteFloatLength((uint)PropertyID.StartTime);
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteVarint32((uint)PropertyID.GameState, _gameState);
            stream.WriteFloat((uint)PropertyID.StartTime, _startTime);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.gameStateSet || entry.startTimeSet)
                    _cache.PushLocalCacheToInflight(context.updateID);
                
                if (entry.gameStateSet)
                    stream.WriteVarint32((uint)PropertyID.GameState, entry.gameState);
                if (entry.startTimeSet)
                    stream.WriteFloat((uint)PropertyID.StartTime, entry.startTime);
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        bool gameStateExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.gameStateSet);
        bool startTimeExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.startTimeSet);
        
        // Remove from in-flight
        if (context.deltaUpdatesOnly && context.reliableChannel)
            _cache.RemoveUpdateFromInflight(context.updateID);
        
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.GameState: {
                    uint previousValue = _gameState;
                    
                    _gameState = stream.ReadVarint32();
                    
                    if (!gameStateExistsInChangeCache && _gameState != previousValue)
                        FireGameStateDidChange(_gameState);
                    break;
                }
                case (uint)PropertyID.StartTime: {
                    float previousValue = _startTime;
                    
                    _startTime = stream.ReadFloat();
                    
                    if (!startTimeExistsInChangeCache && _startTime != previousValue)
                        FireStartTimeDidChange(_startTime);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
